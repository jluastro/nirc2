; find the Strehl straight from the command line
; Marcos van Dam
; August 2004
;@strehl_data_struc_default.pro
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pro calc_cmdstrehl, strehl

root='/s/kefa/jlu/idl/lib/NIRC2/strehl_calc/'
if strehl.nbg gt 0 then bgval=0.

nosmooth=1.

box=strehl.radius*2+1
ctr=(size(strehl.dl_im))(1)/2; center of the diffraction-limited image

image=strehl.currentim
radius=strehl.radius
photrad=strehl.photrad

ismooth=image
if nosmooth eq 0 then ismooth=median(image,3)
maxval = max(ismooth, index)
sz=size(image)	
xcur = index mod sz(1)
ycur = index / sz(2)
	
if !err eq 1 or strehl.autofind eq 1 then begin
    
    cntrd,image,xcur,ycur,x,y,radius,/silent
    if (x ne -1 and y ne -1) then begin
        fwhmastro,image,x,y,box,params
        peak=find_peak(image,x,y,box)
        params(1)=peak
        xsig=params(2)
        ysig=params(3)
        xc=params(4)
        yc=params(5)
        rot=params(6)*180./!pi

	strehl.fwhm=(xsig+ysig)*2.355/2.*strehl.plate_scale

        starflux=bmacaper(image,photrad,x,y,photrad+20,photrad+30,maskkcam=0,skyout=apersky,skyval=bgval)
        strehl.starflux=starflux(0) ; 
		
        sky=bgval	 
        params(0)=bgval	
        strehl.strehlim=(peak/strehl.starflux)/strehl.strehlone


	if (x-2*radius+1 ge 0) and (y-2*radius+1 ge 0) and (x+2*radius lt (size(image))(1)) and (y+2*radius lt (size(image))(2)) then subpop=image(x-2*radius+1:x+2*radius,y-2*radius+1:y+2*radius) else begin
		print,'Star too close to the edge of the image, exiting'
;		subimage=fltarr(2*radius+2,2*radius+2)
	endelse
	subpopdl=strehl.dl_im(ctr-2*radius:ctr+2*radius,ctr-2*radius+1:ctr+2*radius)
        subim=image(x-radius+1:x+radius,y-radius+1:y+radius)
	subim=congrid(subim,radius*16,radius*16,/cubic)
	submax=max(subim)
	npixfwhm=n_elements(where(subim gt 0.5*submax))
	npixfwhm=2*sqrt(npixfwhm/!pi)/8.

	if strehl.strehlim lt 1 then rms_error=sqrt(-alog(strehl.strehlim))*strehl.wavelength/(2*!pi)*1e9 else rms_error=0
        
	print, 'Image '+strcompress(strehl.imno,/remove_all)+' S = '+string(strehl.strehlim,format='$(f5.3)')+' RMS err = ' +string(rms_error,format='$(f6.1)')+' nm  '+'FWHM = '+string(strehl.fwhm,format='$(f6.2)')+' mas'

        if max(subim)/strehl.coadds gt 8000 then print,'Saturation warning: over 8000 counts per coadd' 

        if (x eq -1 or y eq -1) then print,'Centroider error; rerun with bigger aperture.'        
  endif
endif

;return, strehl
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function cmdstrehl, strehl

strehl.last_file='n'+string(strehl.im1,format='(i4.4)')+'.fits'

if strehl.output ne 'none' then begin
    if file_test(strehl.output) ne 1 then begin
        openw,u,strehl.output,/get_lun
        printf,u,"Filename                       Strehl  RMS error(nm)  FWHM (m$
        free_lun,u
    endif
endif
root='/s/kefa/jlu/idl/lib/NIRC2/strehl_calc/'

;find_cmdstrehl, strehl

im1=strehl.im1
nim=strehl.nim
bg1=strehl.bg1
nbg=strehl.nbg
path=strehl.path
list=strehl.list
autofind=strehl.autofind

if (list ne 'none') then begin
    dum=findfile(list,count=count)
    if (count gt 0) then begin
        readcol,list,format='a',files,/silent
        im1=0
        nim=N_ELEMENTS(files)
    endif else begin
        print, "File '"+strcompress(list)+"' not found. Exiting"
        retall
    endelse
endif

strehl.starflux=0.
bgerrs=0.

bg=0.

if nbg gt 0 then begin
	for c1=0,nbg-1 do begin
		imno=c1+bg1
		if imno lt 10 then filename_bg=path+'/n000'+strcompress(imno,/remove_all)+'.fits' 
		if (imno ge 10)*(imno lt 100) then filename_bg=path+'/n00'+strcompress(imno,/remove_all)+'.fits' 
		if (imno ge 100)*(imno lt 1000) then filename_bg=path+'/n0'+strcompress(imno,/remove_all)+'.fits' 
		if (imno ge 1000)*(imno lt 10000) then filename_bg=path+'/n'+strcompress(imno,/remove_all)+'.fits' 

		thisbg=readfits(filename_bg,imheadertemp,/silent)
		if n_elements(thisbg) eq 1 then begin
			print, filename_bg+' does not exist, background set to 0.'
			bgerrs=1.
		endif else bg=bg+thisbg
	endfor

	bg=bg/nbg
endif

if bgerrs eq 1 then begin ; if there is a background error, treat as if bg does not exist
	bg=0.
	nbg=0.
endif

; could implement something clever here to verify that the exposure times and fuilters were the same for the background for the images. Also check for images sizes!!!

;dm=fltarr(nim)
;tt=dm
;fr=dm
;ps=dm
;str=dm

for c1=0,nim-1 do begin
    if (list eq 'none') then begin
 	strehl.imno=c1+im1
	if strehl.imno lt 10 then filename_im=path+'/n000'+strcompress(strehl.imno,/remove_all)+'.fits' 
	if (strehl.imno ge 10)*(strehl.imno lt 100) then filename_im=path+'/n00'+strcompress(strehl.imno,/remove_all)+'.fits' 
	if (strehl.imno ge 100)*(strehl.imno lt 1000) then filename_im=path+'/n0'+strcompress(strehl.imno,/remove_all)+'.fits' 
	if (strehl.imno ge 1000)*(strehl.imno lt 10000) then filename_im=path+'/n'+strcompress(strehl.imno,/remove_all)+'.fits' 
    endif else begin
        strehl.imno=c1
        strehl.filename_im=strcompress(files[c1],/REMOVE)
        ;;strehl.filename_im=path+strcompress(files[c1],/REMOVE)
    endelse
	
	currentim=readfits(filename_im,imheadertemp,/silent)
	if n_elements(currentim) eq 1 then begin
		print,string(filename_im)+' does not exist, skipping.'
		continue
	endif 

;	if c1 eq 0 then begin
		strehl.coadds=sxpar(imheadertemp,'COADDS')
		filter=sxpar(imheadertemp,'FILTER')
		strehl.filt=which_filter(filter)
				
        	camera=strcompress(sxpar(imheadertemp,'CAMNAME'), /remove_all)
                strehl.camera=camera

		strehl.dl_im=readfits(root+strehl.filt+'.fits',/silent)		
		if strehl.camera eq 'narrow' then begin
                        strehl.photrad=strehl.photon_radius*100.
                        strehl.radius=10.
			strehl.plate_scale=9.94
                endif
                if strehl.camera eq 'medium' then begin
                        strehl.photrad=strehl.photon_radius*50.
;                        strehl.dl_im=rebin(strehl.dl_im,256,256)
                        dl_im_temp=rebin(strehl.dl_im,256,256)
                        strehl.dl_im=pad_image(dl_im_temp,512)
                        strehl.radius=5.
			strehl.plate_scale=9.94*2
                endif
                
		if strehl.camera eq 'wide' then begin
                        strehl.photrad=strehl.photon_radius*25.
;                        strehl.dl_im=rebin(strehl.dl_im,128,128)
                        dl_im_temp=rebin(strehl.dl_im,128,128)
                        strehl.dl_im=pad_image(dl_im_temp,512)
                        strehl.radius=3.
			strehl.plate_scale=9.94*4
                endif
        
		  ; find the maximum using the diffraction-limited image, strehl.dl_im

                box=strehl.radius*2+1
                ctr=(size(strehl.dl_im))(1)/2; center of the diffraction-limited image
                dlpeak=find_peak(strehl.dl_im,ctr,ctr,box)

                ; find the total flux in the image
                refflux=bmacaper(strehl.dl_im,strehl.photrad,ctr,ctr,strehl.photrad+20,strehl.photrad+30,maskkcam=0,skyval=0.)
                ; find the reference intensity
                strehl.strehlone=dlpeak/refflux(0)

		strehl.wavelength=central_wavelength(strehl.filt)
		
		xs=(size(currentim))(1)
		ys=(size(currentim))(2)
		blx=512-xs/2
		bly=512-ys/2
		urx=511+xs/2
		ury=511+ys/2
	endif
		
	currentim=fix_image(currentim-bg)
	strehl.currentim(blx:urx,bly:ury)=currentim		
	calc_cmdstrehl,strehl
endfor

return, strehl

end






